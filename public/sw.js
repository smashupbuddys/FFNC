import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, NetworkFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';

// Precache all assets generated by your build process
precacheAndRoute(self.__WB_MANIFEST);

// Cache Google Fonts
registerRoute(
  ({url}) => url.origin === 'https://fonts.googleapis.com' ||
             url.origin === 'https://fonts.gstatic.com',
  new CacheFirst({
    cacheName: 'google-fonts',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 30,
        maxAgeSeconds: 60 * 60 * 24 * 365 // 1 year
      })
    ]
  })
);

// Cache static assets
registerRoute(
  ({request}) => request.destination === 'image' ||
                 request.destination === 'style' ||
                 request.destination === 'script' ||
                 request.destination === 'font',
  new CacheFirst({
    cacheName: 'static-assets',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 60 * 60 * 24 * 30 // 30 days
      })
    ]
  })
);

// Network first for API calls
registerRoute(
  ({request}) => request.destination === 'script' ||
                 request.destination === 'style',
  new NetworkFirst({
    cacheName: 'dynamic-content',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 60 * 60 * 24 // 24 hours
      })
    ]
  })
);

// Offline fallback
self.addEventListener('install', (event) => {
  const offlinePage = new Response(
    '<html><body><h1>Offline</h1><p>Please check your internet connection.</p></body></html>',
    {
      headers: { 'Content-Type': 'text/html' }
    }
  );
  event.waitUntil(
    caches.open('offline').then((cache) => cache.put('/offline.html', offlinePage))
  );
});

self.addEventListener('fetch', (event) => {
  if (event.request.mode === 'navigate') {
    event.respondWith(
      fetch(event.request).catch(() => caches.match('/offline.html'))
    );
  }
});
